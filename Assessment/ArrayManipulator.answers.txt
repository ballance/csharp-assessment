using System;

namespace Assessment
{
    public class ArrayManipulator
    {
        private int[] _currentArray;

        public ArrayManipulator() : this(null) { }

        public ArrayManipulator(int[] initialArray)
        {
            _currentArray = initialArray ?? new int[0];
        }

        public int Sum(int[] input)
        {
            var sum = 0;
            for (var i = 0; i < input.Length; i++)
            {
                sum += input[i];
            }
            return sum;
        }

        public int[] Remove(int indexToRemove)
        {
            var indexRemoved = new int[_currentArray.Length - 1];
            var j = 0;
            for (var i = 0; i < _currentArray.Length - 1; i++)
            {
                if (i == indexToRemove)
                {
                    --i;
                    j++;
                    indexToRemove = -1;
                    continue;
                }
                indexRemoved[i] = _currentArray[i + j];
            }
            return indexRemoved;
        }

        public int[] RemoveWithoutCopy(int indexToRemove)
        {
            var j = 0;
            for (var i = 0; i < _currentArray.Length - 1; i++)
            {
                if (i == indexToRemove)
                {
                    --i;
                    j++;
                    indexToRemove = -1;
                    continue;
                }
                _currentArray[i] = _currentArray[i + j];
            }
            return _currentArray;
        }

        public int[] Append(int toAppend)
        {
            var appended = new int[_currentArray.Length + 1];
            for (var i = 0; i < _currentArray.Length; i++)
            {
                appended[i] = _currentArray[i];
            }

            appended[_currentArray.Length] = toAppend;
            return appended;
        }

        public int[] Truncate(int placesToTruncate)
        {
            var truncated = new int[_currentArray.Length - placesToTruncate];
            for (var i = 0; i < truncated.Length; i++)
            {
                truncated[i] = _currentArray[i];
            }
            return truncated;

        }

        public int[] Prepend(int toPrepend)
        {
            var prepended = new int[_currentArray.Length + 1];
            prepended[0] = toPrepend;

            for (var i = 1; i < prepended.Length; i++)
            {
                prepended[i] = _currentArray[i - 1];
            }

            return prepended;

        }

        public int[] Concat(int[] left, int[] right)
        {
            var concatenated = new int[left.Length + right.Length];

            for (var i = 0; i < left.Length; i++)
            {
                concatenated[i] = left[i];
            }

            for (var j = 0; j < right.Length; j++)
            {
                concatenated[j + left.Length] = right[j];
            }

            return concatenated;
        }

        public int[] Insert(int item, int index)
        {
            return new[] { 1 };

        }

        public int Count(int[] input)
        {
            return -1;
        }

        public int[] Duplicates(int[] input)
        {
            return new[] { 1 };
        }

        public int[] Square()
        {
            for (var i = 0; i < _currentArray.Length; i++)
            {
                _currentArray[i] = Convert.ToInt32(Math.Pow(_currentArray[i], 2));
            }

            return _currentArray;
        }

        public int[] FindAllOccurrances(int occuranceToFind)
        {
            return new[] { 1 };
        }
    }
}